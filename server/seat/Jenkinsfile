pipeline {
    environment {
        repository = "1w2k/c209"
        DOCKERHUB_CREDENTIALS = credentials('docker_credentials')
        dockerImage = ''
        DISCOVERY_SERVER="${env.DISCOVERY_SERVER}"
        SEAT_HOST="${env.SEAT_HOST}"
        SEAT_DB_USER_NAME="${env.SEAT_DB_USER_NAME}"
        SEAT_DB_PASSWORD="${env.SEAT_DB_PASSWORD}"
        KAFKA_URL="${env.KAFKA_URL}"
    }
    agent any

    stages {
        stage('Checkout') {
            steps {
                script {
                    // 코드 체크아웃
                    checkout scm
                }
            }
        }

        stage('Confirm Echo') {
            steps {
                script {
                    echo "seat server 입니다."
                }
            }
        }
         stage('Build Seat-Server .JAR') {
                    steps {
                        script {
                            // 변경된 브랜치와 머지 대상 브랜치 출력
                            // 현재 빌드 중인 브랜치명 확인
                            def currentBranch = env.BRANCH_NAME
                            echo "Merge Target Branch : \${CHANGE_TARGET}"
                            echo "Current Branch: \${currentBranch}"

                            echo "seat server 입니다."
                            sh 'pwd'
                            sh 'ls -al'
                            //gradlew 빌드
                            sh 'java --version'
                            sh 'chmod +x ./server/seat/gradlew'
                            sh '''
                                cd ./server/seat
                                ./gradlew clean build
                            '''
                        }
                    }
                }

                stage('Build Seat-Server Image'){
                    steps{
                        script{
                            dockerImage = docker.build("${repository}:Seat_${BUILD_NUMBER}", "-f server/seat/Dockerfile ./server/seat")
                        }
                    }
                }

                stage('DockerHub Login'){
                    steps{
                        script{
                            sh "echo \${DOCKERHUB_CREDENTIALS_PSW} | docker login -u \${DOCKERHUB_CREDENTIALS_USR} --password-stdin"
                        }
                    }
                }

                stage('Push Seat Image to DockerHub'){
                    steps {
                        script {
                            sh "docker push \${repository}:Seat_\${BUILD_NUMBER}"
                        }
                    }
                }

                stage('Clean Seat Image'){
                    steps{
                        script{
                            sh "docker rmi \${repository}:Seat_\${BUILD_NUMBER}"
                        }
                    }
                }

                stage("Garbage Collect TESTSERV") {
                    steps {
                        sshPublisher(
                            continueOnError: true, failOnError: false,
                            publishers: [
                                sshPublisherDesc(
                                    configName: "Seat_Service",
                                    verbose: true,
                                    transfers: [
                                        sshTransfer(execCommand: "sudo docker kill \$(docker ps | grep seat | tr ' ' '\t' | cut -f1)"),
                                        sshTransfer(execCommand: "sudo docker system prune -af")
                                    ]
                                )
                            ]
                        )
                    }
                }

                stage("Deploy"){
                    steps{
                        sshPublisher(
                            continueOnError: false, failOnError: true,
                            publishers: [
                                sshPublisherDesc(
                                    configName: "Seat_Service",
                                    verbose: true,
                                    transfers: [
                                        sshTransfer(execCommand: "sudo docker rm -f seat"),
                                        sshTransfer(execCommand: "sudo docker pull " + repository +":Seat_${BUILD_NUMBER}"),
                                        sshTransfer(execCommand: "sudo docker run -d -p 8889:8889 --name seat --log-driver=fluentd -e DISCOVERY_SERVER=\"${DISCOVERY_SERVER}\" -e SEAT_HOST=\"${SEAT_HOST}\" -e SEAT_DB_USER_NAME=\"${SEAT_DB_USER_NAME}\" -e SEAT_DB_PASSWORD=\"${SEAT_DB_PASSWORD}\" -e KAFKA_URL=\"${KAFKA_URL}\"  " + repository + ":Seat_${BUILD_NUMBER}")
                                    ]
                                )
                            ]
                        )
                    }
                }
    }

    post {
        success {
           script {
                   def Author_ID = sh(script: "git show -s --pretty=%an", returnStdout: true).trim()
                   def Author_Name = sh(script: "git show -s --pretty=%ae", returnStdout: true).trim()
                   mattermostSend (color: 'good',
                   message: "빌드 성공: ${env.JOB_NAME} #${env.BUILD_NUMBER} by ${Author_ID}(${Author_Name})\n(<${env.BUILD_URL}|Details>)",
                   endpoint: "${env.MM_WEBHOOK}",
                   channel: 'C209_CICD'
                   )
                   echo "${env.MM_WEBHOOK}"
               }
           }
       failure {
           script {
               def Author_ID = sh(script: "git show -s --pretty=%an", returnStdout: true).trim()
               def Author_Name = sh(script: "git show -s --pretty=%ae", returnStdout: true).trim()
               mattermostSend (color: 'danger',
               message: "빌드 실패: ${env.JOB_NAME} #${env.BUILD_NUMBER} by ${Author_ID}(${Author_Name})\n(<${env.BUILD_URL}|Details>)",
               endpoint: "${env.MM_WEBHOOK}",
               channel: 'C209_CICD'
               )
               echo "${env.MM_WEBHOOK}"
           }
       }
       unstable {
           script {
               def Author_ID = sh(script: "git show -s --pretty=%an", returnStdout: true).trim()
               def Author_Name = sh(script: "git show -s --pretty=%ae", returnStdout: true).trim()
               mattermostSend (color: 'good',
               message: "빌드 성공: ${env.JOB_NAME} #${env.BUILD_NUMBER} by ${Author_ID}(${Author_Name})\n(<${env.BUILD_URL}|Details>)",
               endpoint: "${env.MM_WEBHOOK}",
               channel: 'C209_CICD'
               )
               echo "${env.MM_WEBHOOK}"
           }
       }
    }
}
